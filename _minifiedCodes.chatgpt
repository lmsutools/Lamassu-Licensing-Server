<"file: cli.js">const readline=require("readline"),handleCommandLine=require("./commandHandler")["handleCommandLine"],rl=readline.createInterface({input:process.stdin,output:process.stdout});console.log('\nWelcome to the Licensing Server CLI.\nType "help" to view available commands and their usages.'),rl.on("line",e=>{handleCommandLine(e.trim().split(" "))}),rl.on("close",()=>{console.log("\nExiting Licensing Server CLI."),process.exit(0)});</"file: cli.js">

<"file: commandHandler.js">const{createProduct,showProducts}=require("./productManager"),{generateLicense,renovateLicense,changeLicenseState}=require("./licenseManager"),showLicenses=require("./licenseManager")["showLicenses"];function handleCommandLine(e){switch(e[0]){case"createProduct":e[1]?createProduct(e[1]):console.log("Usage: createProduct <productName>");break;case"showProducts":showProducts();break;case"generateLicense":e[1]&&e[2]?generateLicense(e[1],parseInt(e[2])):console.log("Usage: generateLicense <productName> <days>");break;case"renovateLicense":e[1]&&e[2]?renovateLicense(e[1],parseInt(e[2])):console.log("Usage: renovateLicense <licenseKey> <days>");break;case"changeLicenseState":e[1]&&e[2]?changeLicenseState(e[1],e[2]):console.log("Usage: changeLicenseState <licenseKey> <newState>");break;case"show":e[1]?showLicenses(e[1]):console.log("Usage: show <product>");break;case"help":handleHelp();break;default:console.log('Invalid command. Type "help" to view available commands and their usages.')}}function handleHelp(){console.log(`
Available commands:
- createProduct <productName>
- showProducts
- generateLicense <productName> <days>
- renovateLicense <licenseKey> <days>
- changeLicenseState <licenseKey> <newState>
- show <product>
- help
- exit
`)}module.exports={handleCommandLine:handleCommandLine};</"file: commandHandler.js">

<"file: createTable.js">const pool=require("./db");pool.getConnection().then(e=>{e.query(`
    CREATE TABLE IF NOT EXISTS products (
      id VARCHAR(36) PRIMARY KEY,
      name VARCHAR(50) NOT NULL UNIQUE
    )
  `).then(e=>{console.log("products table created")}).catch(e=>{console.error("Error creating products table:",e)}),e.query(`
    CREATE TABLE IF NOT EXISTS licenses (
      id INT PRIMARY KEY AUTO_INCREMENT,
      license_key VARCHAR(36) NOT NULL UNIQUE,
      product_id VARCHAR(36) NOT NULL,
      state ENUM("inactive", "active", "expired") NOT NULL,
      expiration_date DATETIME NOT NULL,
      machine_id VARCHAR(50),
      FOREIGN KEY (product_id) REFERENCES products(id) ON DELETE CASCADE
    )
  `).then(e=>{console.log("licenses table created")}).catch(e=>{console.error("Error creating licenses table:",e)}),e.release()}).catch(e=>{console.error("Error creating tables:",e)});</"file: createTable.js">

<"file: db.js">const mariadb=require("mariadb"),pool=mariadb.createPool({host:"localhost",user:"admin_license_server",password:"admin123",database:"licenses_db",connectionLimit:5,connectionTimeout:1e4});module.exports={getConnection:()=>pool.getConnection()};</"file: db.js">

<"file: licenseManager.js">const uuidv4=require("uuid").v4,pool=require("./db");async function generateLicense(e,n){try{var t,r,a,o,s=await pool.getConnection(),[i]=await s.query("SELECT * FROM products WHERE name = ?",[e]);i?(t=uuidv4(),r=i.id,a=new Date,(o=new Date(a)).setDate(a.getDate()+n),await s.query("INSERT INTO licenses (license_key, product_id, state, expiration_date) VALUES (?, ?, ?, ?)",[t,r,"inactive",o]),console.log(`License generated for product "${e}" with key ${t} and expiration date `+o.toISOString()),s.release()):console.error("Product not found: "+e)}catch(e){console.error("Error generating license:",e)}}async function getLicense(e){try{var n=await pool.getConnection(),[t]=await n.query("SELECT * FROM licenses WHERE license_key = ?",[e]);return t?(n.release(),t):(console.error("License not found: "+e),null)}catch(e){return console.error("Error retrieving license:",e),null}}async function renovateLicense(e,n){try{var t,r=await pool.getConnection(),[a]=await r.query("SELECT * FROM licenses WHERE license_key = ?",[e]);a?(new Date,(t=new Date(a.expiration_date)).setDate(t.getDate()+n),await r.query("UPDATE licenses SET expiration_date = ? WHERE license_key = ?",[t,e]),console.log(`License ${e} updated. New expiration date: `+t.toISOString()),r.release()):console.error("License not found: "+e)}catch(e){console.error("Error renovating license:",e)}}async function changeLicenseState(e,n){try{var t=await pool.getConnection(),[r]=await t.query("SELECT * FROM licenses WHERE license_key = ?",[e]);r?(await t.query("UPDATE licenses SET state = ? WHERE license_key = ?",[n,e]),console.log(`License ${e} state updated. New state: `+n),t.release()):console.error("License not found: "+e)}catch(e){console.error("Error changing license state:",e)}}async function activateLicense(e){try{var n=await pool.getConnection(),[t]=await n.query("SELECT * FROM licenses WHERE license_key = ?",[e]);if(t)return"active"===t.state?{status:200,message:`License ${e} is already active.`}:new Date(t.expiration_date)<new Date?{status:400,message:`License ${e} has already expired.`}:(await n.query("UPDATE licenses SET state = ? WHERE license_key = ?",["active",e]),n.release(),{status:200,message:`License ${e} activated for product ${t.product_id}.`});throw new Error(`License ${e} not found.`)}catch(e){return console.error("Error activating license:",e),{status:400,message:"Error activating license."}}}async function getAllLicenses(){try{var e=await pool.getConnection(),[n]=await e.query("SELECT * FROM licenses");return e.release(),n}catch(e){return console.error("Error retrieving all licenses:",e),[]}}async function showLicenses(e){try{var n,t=await pool.getConnection(),[r]=await t.query("SELECT * FROM products WHERE name = ?",[e]);r?(n=await t.query("SELECT * FROM licenses WHERE product_id = ?",[r.id]),console.log(`Licenses for product "${e}":`),console.table(n)):console.error("Product not found: "+e),t.release()}catch(e){console.error("Error getting licenses for product:",e)}}module.exports={generateLicense:generateLicense,getLicense:getLicense,renovateLicense:renovateLicense,changeLicenseState:changeLicenseState,activateLicense:activateLicense,getAllLicenses:getAllLicenses,showLicenses:showLicenses};</"file: licenseManager.js">

<"file: main.js">const express=require("express"),pool=require("./db"),handleCommandLine=require("./commandHandler")["handleCommandLine"],activateLicense=require("./licenseManager")["activateLicense"],licenseManager=require("./licenseManager"),app=express(),port=3001,dbConfig=pool.config,activateLicenseAPI=async(e,n)=>{e=e.params.license,e=await activateLicense(e);n.status(e.status).send(e.message)};app.get("/api/licenses",async(e,n)=>{try{var s=await licenseManager.getAllLicenses();n.status(200).send(s)}catch(e){n.status(500).send("Error retrieving all licenses.")}}),app.post("/api/activate/:license",activateLicenseAPI),app.listen(port,()=>{console.log("Licensing Server listening at http://localhost:"+port)}),pool.getConnection().then(()=>{console.log("Connected to MariaDB database.")}).catch(e=>{console.error("Error connecting to database:",e),process.exit(1)}),process.on("unhandledRejection",e=>{console.error("Unhandled rejection:",e),process.exit(1)}),process.on("uncaughtException",e=>{console.error("Uncaught exception:",e),process.exit(1)}),process.on("SIGINT",()=>{console.log("Exiting Licensing Server."),process.exit(0)}),handleCommandLine("");</"file: main.js">

<"file: productManager.js">const uuidv4=require("uuid").v4,pool=require("./db");async function createProduct(r){try{var o=await pool.getConnection(),e=uuidv4();await o.query("INSERT INTO products (id, name) VALUES (?, ?)",[e,r]),console.log(`Product "${r}" created with ID ${e}.`),o.release()}catch(o){"ER_DUP_ENTRY"===o.code?console.error(`Error creating product: Product "${r}" already exists.`):console.error("Error creating product:",o)}}async function showProducts(){try{var o=await pool.getConnection(),r=await o.query("SELECT * FROM products");console.log("All products:"),console.table(r),o.release()}catch(o){console.error("Error getting products:",o)}}module.exports={createProduct:createProduct,showProducts:showProducts};</"file: productManager.js">

