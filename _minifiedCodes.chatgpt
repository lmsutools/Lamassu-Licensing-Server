<"file: cli.js">const readline=require("readline"),handleCommandLine=require("./commandHandler").handleCommandLine,rl=readline.createInterface({input:process.stdin,output:process.stdout});console.log('\nWelcome to the Licensing Server CLI.\nType "help" to view available commands and their usages.'),rl.on("line",e=>{handleCommandLine(e.trim().split(" "))}),rl.on("close",()=>{console.log("\nExiting Licensing Server CLI."),process.exit(0)});</"file: cli.js">

<"file: commandHandler.js">const{createProduct,showProducts}=require("./productManager"),{generateLicense,renovateLicense,changeLicenseState}=require("./licenseManager"),showLicenses=require("./licenseManager").showLicenses;function handleCommandLine(e){switch(e[0]){case"createProduct":e[1]?createProduct(e[1]):console.log("Usage: createProduct <productName>");break;case"showProducts":showProducts();break;case"generateLicense":e[1]&&e[2]?generateLicense(e[1],parseInt(e[2])):console.log("Usage: generateLicense <productName> <days>");break;case"renovateLicense":e[1]&&e[2]?renovateLicense(e[1],parseInt(e[2])):console.log("Usage: renovateLicense <licenseKey> <days>");break;case"changeLicenseState":e[1]&&e[2]?changeLicenseState(e[1],e[2]):console.log("Usage: changeLicenseState <licenseKey> <newState>");break;case"show":e[1]?showLicenses(e[1]):console.log("Usage: show <product>");break;case"help":handleHelp();break;default:console.log('Invalid command. Type "help" to view available commands and their usages.')}}function handleHelp(){console.log(`
Available commands:
- createProduct <productName>
- showProducts
- generateLicense <productName> <days>
- renovateLicense <licenseKey> <days>
- changeLicenseState <licenseKey> <newState>
- show <product>
- help
- exit
`)}module.exports={handleCommandLine:handleCommandLine};</"file: commandHandler.js">

<"file: licenseManager.js">const uuidv4=require("uuid").v4,pool=require("./db");async function checkLicenseState(e){var t=await pool.getConnection(),[e]=await t.query("SELECT * FROM licenses WHERE license_key = ?",[e]);return t.release(),e?{status:200,message:e.state}:{status:404,message:"License not found."}}async function generateLicense(e,t){try{var n,a,s,i,c=await pool.getConnection(),[o]=await c.query("SELECT * FROM products WHERE name = ?",[e]);o?(n=uuidv4(),a=o.id,s=new Date,(i=new Date(s)).setDate(s.getDate()+t),await c.query("INSERT INTO licenses (license_key, product_id, state, expiration_date, creation_date) VALUES (?, ?, ?, ?, ?)",[n,a,"inactive",i,s]),console.log(`License generated for product "${e}" with key ${n} and expiration date `+i.toISOString()),c.release()):console.error("Product not found: "+e)}catch(e){console.error("Error generating license:",e)}}async function getLicense(e){try{var t=await pool.getConnection(),[n]=await t.query("SELECT * FROM licenses WHERE license_key = ?",[e]);return n?(t.release(),n):(console.error("License not found: "+e),null)}catch(e){return console.error("Error retrieving license:",e),null}}async function renovateLicense(e,t){try{var n,a=await pool.getConnection(),[s]=await a.query("SELECT * FROM licenses WHERE license_key = ?",[e]);s?(new Date,(n=new Date(s.expiration_date)).setDate(n.getDate()+t),await a.query("UPDATE licenses SET expiration_date = ? WHERE license_key = ?",[n,e]),console.log(`License ${e} updated. New expiration date: `+n.toISOString()),a.release()):console.error("License not found: "+e)}catch(e){console.error("Error renovating license:",e)}}async function changeLicenseState(e,t){try{var n=await pool.getConnection(),[a]=await n.query("SELECT * FROM licenses WHERE license_key = ?",[e]);a?(await n.query("UPDATE licenses SET state = ? WHERE license_key = ?",[t,e]),console.log(`License ${e} state updated. New state: `+t),n.release()):console.error("License not found: "+e)}catch(e){console.error("Error changing license state:",e)}}async function activateLicense(e,t){var n,a=await pool.getConnection(),[s]=await a.query("SELECT * FROM licenses WHERE license_key = ?",[e]);return s?"inactive"!==s.state?(a.release(),{status:400,message:`License ${e} is not inactive.`}):new Date(s.expiration_date)<new Date?(a.release(),{status:400,message:`License ${e} has already expired.`}):(n=new Date,await a.query("UPDATE licenses SET state = 'active', machine_id = ?, activation_date = ? WHERE license_key = ?",[t,n,e]),a.release(),{status:200,message:`License ${e} activated for product ${s.product_id}.`}):(a.release(),{status:404,message:`License ${e} not found.`})}async function deactivateLicense(e){var t=await pool.getConnection(),[n]=await t.query("SELECT * FROM licenses WHERE license_key = ?",[e]);return n?"active"!==n.state?(t.release(),{status:400,message:`License ${e} is not active.`}):(await t.query("UPDATE licenses SET state = 'inactive', machine_id = NULL WHERE license_key = ?",[e]),t.release(),{status:200,message:`License ${e} deactivated.`}):(t.release(),{status:404,message:`License ${e} not found.`})}async function getAllLicenses(){try{var e=await pool.getConnection(),[t]=await e.query("SELECT * FROM licenses");return e.release(),t}catch(e){return console.error("Error retrieving all licenses:",e),[]}}async function showLicenses(e){try{var t,n=await pool.getConnection(),[a]=await n.query("SELECT * FROM products WHERE name = ?",[e]);a?(t=await n.query("SELECT * FROM licenses WHERE product_id = ?",[a.id]),console.log(`Licenses for product "${e}":`),console.table(t)):console.error("Product not found: "+e),n.release()}catch(e){console.error("Error getting licenses for product:",e)}}const machineIdRegex=/^[0-9a-zA-Z]{4}-[0-9a-zA-Z]{4}-[0-9a-zA-Z]{4}-[0-9a-zA-Z]{4}-[0-9a-zA-Z]{4}$/;async function validateMachineId(e){return machineIdRegex.test(e)}module.exports={generateLicense:generateLicense,getLicense:getLicense,renovateLicense:renovateLicense,changeLicenseState:changeLicenseState,activateLicense:activateLicense,deactivateLicense:deactivateLicense,getAllLicenses:getAllLicenses,showLicenses:showLicenses};</"file: licenseManager.js">

<"file: main.js">const express=require("express"),slowDown=require("express-slow-down"),pool=require("./db"),handleCommandLine=require("./commandHandler").handleCommandLine,activateLicense=require("./licenseManager").activateLicense,getLicense=require("./licenseManager").getLicense,licenseManager=require("./licenseManager"),app=express(),port=6e3,speedLimiter=slowDown({windowMs:2e4,delayAfter:5,delayMs:5e3}),activateLicenseAPI=(app.use(speedLimiter),app.use(express.json()),async(e,a)=>{var s=e.params.license,e=e.params.machine_id,s=await activateLicense(s,e);a.status(s.status).send(s.message)}),deactivateLicenseAPI=async(e,a)=>{var s=e.params.license,e=e.body.machineId,s=await licenseManager.deactivateLicense(s,e);a.status(s.status).send(s.message)};async function getLicenseStatusAPI(e,a){var s,n=e.params.license,e=e.params.machine_id;await licenseManager.validateMachineId(e)?(s=await getLicense(n))?s.machine_id!==e?a.status(400).send({status:400,message:`License ${n} is not activated on the given machine.`}):a.status(200).send({status:200,state:s.state,expiration_date:s.expiration_date}):a.status(404).send({status:404,message:"License not found."}):a.status(400).send({status:400,message:"Invalid machine_id format: "+e})}app.get("/api/licenses",async(e,a)=>{var s=await licenseManager.getAllLicenses();a.status(200).send(s)}),app.post("/api/deactivate/:license",deactivateLicenseAPI),app.post("/api/activate/:license",activateLicenseAPI),app.get("/api/licenses/:license",getLicenseStatusAPI),app.get("/ping",(e,a)=>{a.send("pong")}),app.post("/api/activate/:license/:machine_id",activateLicenseAPI),app.listen(port,()=>{console.log("Licensing Server listening at http://localhost:"+port)}),pool.getConnection().then(()=>{console.log("Connected to MariaDB database.")}).catch(e=>{console.error("Error connecting to database:",e),process.exit(1)}),process.on("unhandledRejection",e=>{console.error("Unhandled rejection:",e),process.exit(1)}),process.on("uncaughtException",e=>{console.error("Uncaught exception:",e),process.exit(1)}),process.on("SIGINT",()=>{console.log("Exiting Licensing Server."),process.exit(0)}),handleCommandLine("");</"file: main.js">

<"file: package.json">{"name":"lamassu-licensing-server","version":"1.0.0","description":"","main":"index.js","scripts":{"test":"echo \"Error: no test specified\" && exit 1"},"keywords":[],"author":"","license":"ISC","dependencies":{"crypto":"^1.0.1","express":"^4.18.2","express-slow-down":"^1.6.0","mariadb":"^3.1.1","readline":"^1.3.0","uuid":"^9.0.0"}}</"file: package.json">

<"file: productManager.js">const uuidv4=require("uuid").v4,pool=require("./db");async function createProduct(r){try{var o=await pool.getConnection(),e=uuidv4(),t=new Date;await o.query("INSERT INTO products (id, name, creation_date) VALUES (?, ?, ?)",[e,r,t]),console.log(`Product "${r}" created with ID ${e}.`),o.release()}catch(o){"ER_DUP_ENTRY"===o.code?console.error(`Error creating product: Product "${r}" already exists.`):console.error("Error creating product:",o)}}async function showProducts(){try{var o=await pool.getConnection(),r=await o.query("SELECT * FROM products");console.log("All products:"),console.table(r),o.release()}catch(o){console.error("Error getting products:",o)}}module.exports={createProduct:createProduct,showProducts:showProducts};</"file: productManager.js">

<"file: testdb.js">const mariadb=require("mariadb"),DB_HOST="localhost",DB_USER="admin_license_server",DB_PASSWORD="K&vKEi87a2g",DB_NAME="licenses_db",pool=mariadb.createPool({host:DB_HOST,user:DB_USER,port:3080,password:DB_PASSWORD,database:DB_NAME});async function createTableAndInsertData(){let e;try{await(e=await pool.getConnection()).query(`
      CREATE TABLE IF NOT EXISTS users (
        id INT PRIMARY KEY AUTO_INCREMENT,
        name VARCHAR(255) NOT NULL,
        email VARCHAR(255) NOT NULL UNIQUE,
        age INT
      )
    `),console.log("Table created."),await e.query(`
      INSERT INTO users (name, email, age)
      VALUES
        ('John', 'john@example.com', 30),
        ('Jane', 'jane@example.com', 25),
        ('Bob', 'bob@example.com', 40)
    `),console.log("Data inserted.")}catch(e){console.error(e)}finally{if(e)return e.end()}}createTableAndInsertData();</"file: testdb.js">

<"file: error.txt">Error minifying .env: Unsupported file format
Error minifying .env.example: Unsupported file format
Error minifying INFORMATION\CHANGELOG.md: Unsupported file format
Error minifying INFORMATION\Database Fields.md: Unsupported file format
Error minifying INFORMATION\ENDPOINTS.md: Unsupported file format
Error minifying INFORMATION\TODO.md: Unsupported file format
Error minifying README.md: Unsupported file format</"file: error.txt">

<"file: instructions.txt">Fix the errors and re-run the minify command.</"file: instructions.txt">

