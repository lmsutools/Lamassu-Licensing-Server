<"file: cli.js">require.main===module&&(console.error("cli.js should not be run directly. Run main.js instead."),process.exit(1));</"file: cli.js">

<"file: commandHandler.js">const productManager=require("./productManager"),licenseManager=require("./licenseManager");function handleCommandLine(c){c.question("Enter command: ",e=>{var o=e.split(" "),n=o[1],a=productManager.getProduct(n),e=o[1],s=a?.licenses[e];switch(o[0]){case"createProduct":2!==o.length?console.log("Usage: createProduct <productName>"):productManager.createProduct(n);break;case"generateLicense":4!==o.length||"days"!==o[3]?console.log("Usage: generateLicense <productName> <days> days"):a?licenseManager.generateLicense(a,o[2]):console.log("Product not found.");break;case"showProducts":1!==o.length?console.log("Usage: showProducts"):productManager.showProducts();break;case"show":2!==o.length?console.log("Usage: show <productName>"):a?console.log(a):console.log("Product not found.");break;case"renovateLicense":3!==o.length?console.log("Usage: renovateLicense <licenseKey> <days>"):s?licenseManager.renovateLicense(s,o[2]):console.log("License not found.");break;case"changeLicenseState":3!==o.length?console.log("Usage: changeLicenseState <licenseKey> <newState>"):s?licenseManager.changeLicenseState(s,o[2]):console.log("License not found.");break;case"licenseDetails":2!==o.length?console.log("Usage: licenseDetails <licenseKey>"):s?licenseManager.licenseDetails(s):console.log("License not found.");break;case"help":handleHelp();break;case"exit":c.close(),process.exit(0);break;default:console.log('Invalid command. Type "help" for a list of available commands.')}handleCommandLine(c)})}function handleHelp(){console.log("Available commands:"),console.log(" createProduct <productName>"),console.log(" generateLicense <productName> <days> days"),console.log(" showProducts"),console.log(" show <productName>"),console.log(" renovateLicense <licenseKey> <days>"),console.log(" changeLicenseState <licenseKey> <newState>"),console.log(" licenseDetails <licenseKey>"),console.log(" help"),console.log(" exit")}module.exports={handleCommandLine:handleCommandLine};</"file: commandHandler.js">

<"file: licenseManager.js">const uuidv4=require("uuid")["v4"];function generateLicense(e,t){var n=uuidv4(),i=new Date;i.setDate(i.getDate()+parseInt(t)),e.licenses[n]={key:n,expirationDate:i,state:"active"},console.log(`Generated license key for ${e.name}: `+n)}function renovateLicense(e,t){var n=new Date(e.expirationDate);n.setDate(n.getDate()+parseInt(t)),e.expirationDate=n,console.log(`Renovated license ${e.key}. New expiration date: `+n.toISOString())}function changeLicenseState(e,t){e.state=t,console.log(`Changed license ${e.key} state to `+t)}function licenseDetails(e){console.log(`License details for ${e.key}:`),console.log("- Expiration date: "+e.expirationDate.toISOString()),console.log("- State: "+e.state)}function getLicense(e,t){return e.licenses[t]}module.exports={generateLicense:generateLicense,renovateLicense:renovateLicense,changeLicenseState:changeLicenseState,licenseDetails:licenseDetails,getLicense:getLicense};</"file: licenseManager.js">

<"file: main.js">const express=require("express"),readline=require("readline"),app=express(),port=3129,productManager=require("./productManager"),commandHandler=require("./commandHandler"),licenseManager=require("./licenseManager"),rl=(app.use(express.json()),readline.createInterface({input:process.stdin,output:process.stdout}));commandHandler.handleCommandLine(rl),cr;</"file: main.js">

<"file: productManager.js">const products={};function createProduct(o){products[o]?console.log(`Product ${o} already exists.`):(products[o]={name:o,licenses:{}},console.log(`Product ${o} created.`))}function showProducts(){console.log("Products:");for(const o in products)console.log("- "+o)}function getProduct(o){return products[o]}module.exports={createProduct:createProduct,showProducts:showProducts,getProduct:getProduct};</"file: productManager.js">

